# Copyright Louis Dionne 2015
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

language: c++
compiler: clang
os: linux
sudo: false

# Do not build branches of the form "pr/*". By prefixing pull requests coming
# from branches inside the repository with pr/, this avoids building both the
# branch push _and_ the pull request.
branches:
  except: /pr\/.*/

env:
  global:
    # GitHub token for pushing the documentation, logging in with the
    # Travis command line utility and so on. The token is stored in the
    # ${GITHUB_TOKEN} environment variable.
    - secure: "gikHKTxWGN9FnJ9m+F53Y5j7jWGAOKlL2ylcFM2o0KoXOkoNAK9bJpilNppRwWhgwpC3yTJDN0k7xh9I6Ec8L0G46Q2QZdtJ/NFvWbafpzQcrAg6+872yKlP8h3GHexwEDdAdxCv8g2HeavFrDcqynssI8IoIHyZmsR6Dwym+eo="

  # Workaround for https://github.com/travis-ci/travis-ci/issues/4681
  matrix:
    - TRAVIS_EMPTY_JOB_WORKAROUND=true


matrix:
  exclude:
    - env: TRAVIS_EMPTY_JOB_WORKAROUND=true

  include:
    ##########################################################################
    # Build with the main configuration on all the supported compilers
    #
    # Note that we only use the memory checker on the main configuration to
    # speed up Travis builds.
    ##########################################################################
    # Clang 3.5
    - env: UNIT_TESTS=true COMPILER=clang++-3.5 BOOST_VERSION=1.59.0 CMAKE_OPTIONS="-DBOOST_HANA_ENABLE_MEMCHECK=ON"
      addons: &clang35
        apt:
          packages: ["clang-3.5", "valgrind"]
          sources: &sources
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.5
            - llvm-toolchain-precise-3.6
            - llvm-toolchain-precise-3.7
            - llvm-toolchain-precise

    # Clang 3.6
    - env: UNIT_TESTS=true COMPILER=clang++-3.6 BOOST_VERSION=1.59.0 CMAKE_OPTIONS="-DBOOST_HANA_ENABLE_MEMCHECK=ON"
      addons: &clang36
        apt:
          packages: ["clang-3.6", "valgrind"]
          sources: *sources

    # Clang 3.7
    - env: UNIT_TESTS=true COMPILER=clang++-3.7 BOOST_VERSION=1.59.0 CMAKE_OPTIONS="-DBOOST_HANA_ENABLE_MEMCHECK=ON"
      addons: &clang37
        apt:
          packages: ["clang-3.7", "valgrind"]
          sources: *sources

    # Xcode 6.4
    - os: osx
      env: UNIT_TESTS=true COMPILER=clang++ BOOST_VERSION=1.59.0
      osx_image: xcode6.4

    # Xcode 7
    - os: osx
      env: UNIT_TESTS=true COMPILER=clang++ BOOST_VERSION=1.59.0
      osx_image: xcode7


    ##########################################################################
    # Build with variations in the configuration
    ##########################################################################
    # Without concept checks
    - env: UNIT_TESTS=true COMPILER=clang++-3.7 BOOST_VERSION=1.59.0 CMAKE_OPTIONS="-DBOOST_HANA_ENABLE_CONCEPT_CHECKS=OFF"
      addons: *clang37

    # Without exceptions
    - env: UNIT_TESTS=true COMPILER=clang++-3.7 BOOST_VERSION=1.59.0 CMAKE_OPTIONS="-DBOOST_HANA_ENABLE_EXCEPTIONS=OFF"
      addons: *clang37

    # Build with libstdc++ instead of libc++
    - env: UNIT_TESTS=true COMPILER=clang++-3.7 BOOST_VERSION=1.59.0 STDLIB=libstdc++
      addons:
        apt:
          packages: ["clang-3.7", "g++-5"]
          sources: *sources

    # With Boost 1.57
    - env: UNIT_TESTS=true COMPILER=clang++-3.7 BOOST_VERSION=1.57.0
      addons: *clang37

    # With Boost 1.58
    - env: UNIT_TESTS=true COMPILER=clang++-3.7 BOOST_VERSION=1.58.0
      addons: *clang37

    # Without Boost (make sure we don't depend on it)
    - env: UNIT_TESTS=true COMPILER=clang++-3.7
      addons: *clang37

    # With Boost.Build instead of CMake (on Linux)
    - env: UNIT_TESTS=true COMPILER=clang++-3.7 BOOST_VERSION=1.59.0 BOOST_BUILD=true
      addons: *clang37

    # With Boost.Build instead of CMake (on OS X)
    - os: osx
      env: UNIT_TESTS=true COMPILER=clang++ BOOST_VERSION=1.59.0 BOOST_BUILD=true
      osx_image: xcode7


    ##########################################################################
    # Generate the documentation
    ##########################################################################
    - env: DOCUMENTATION=true COMPILER=clang++-3.7 BOOST_VERSION=1.59.0
      addons: *clang37

    - env: DOCUMENTATION=true COMPILER=clang++-3.7 BOOST_VERSION=1.59.0 BOOST_BUILD=true
      addons: *clang37


    ##########################################################################
    # Benchmarks
    ##########################################################################
    - env: BENCHMARKS=true COMPILER=clang++-3.5 BOOST_VERSION=1.59.0 CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE=Release"
      addons: *clang35

    # Clang 3.5 does not support debug info for `auto`, so we don't benchmark in 'Debug' mode.

    - env: BENCHMARKS=true COMPILER=clang++-3.6 BOOST_VERSION=1.59.0 CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE=Release"
      addons: *clang36

    - env: BENCHMARKS=true COMPILER=clang++-3.6 BOOST_VERSION=1.59.0 CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE=Debug"
      addons: *clang36

    - env: BENCHMARKS=true COMPILER=clang++-3.7 BOOST_VERSION=1.59.0 CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE=Release"
      addons: *clang37

    - env: BENCHMARKS=true COMPILER=clang++-3.7 BOOST_VERSION=1.59.0 CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE=Debug"
      addons: *clang37


    ##########################################################################
    # Jobs that are allowed to fail
    ##########################################################################
    # Clang trunk
    - env: UNIT_TESTS=true COMPILER=clang++-3.8 BOOST_VERSION=1.59.0
      addons:
        apt:
          packages: ["clang-3.8"]
          sources: *sources

    # Boost trunk
    - env: UNIT_TESTS=true COMPILER=clang++-3.7 BOOST_VERSION=trunk
      addons: *clang37

    # Boost 1.60 beta 1
    - env: UNIT_TESTS=true COMPILER=clang++-3.7 BOOST_VERSION=1.60.0
      addons: *clang37

    # Xcode 7.2 beta 1
    - os: osx
      env: UNIT_TESTS=true COMPILER=clang++ BOOST_VERSION=1.59.0
      osx_image: xcode7.2b1


  allow_failures:
    - env: UNIT_TESTS=true COMPILER=clang++-3.7 BOOST_VERSION=trunk
    - env: UNIT_TESTS=true COMPILER=clang++-3.7 BOOST_VERSION=1.60.0
    - env: UNIT_TESTS=true COMPILER=clang++-3.8 BOOST_VERSION=1.59.0
    - osx_image: xcode7.2b1


install:
  ############################################################################
  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  ############################################################################
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}

  ############################################################################
  # Install Boost headers
  ############################################################################
  - if [[ "${BOOST_VERSION}" == "1.57.0" ]]; then BOOST_URL="http://sourceforge.net/projects/boost/files/boost/1.57.0/boost_1_57_0.tar.gz"; fi
  - if [[ "${BOOST_VERSION}" == "1.58.0" ]]; then BOOST_URL="http://sourceforge.net/projects/boost/files/boost/1.58.0/boost_1_58_0.tar.gz"; fi
  - if [[ "${BOOST_VERSION}" == "1.59.0" ]]; then BOOST_URL="http://sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz"; fi
  - if [[ "${BOOST_VERSION}" == "1.59.0" ]]; then BOOST_URL="http://boost.cowic.de/rc/boost_1_60_0_b1_rc3.tar.gz"; fi
  - if [[ "${BOOST_URL}" != "" ]]; then mkdir boost && travis_retry wget --quiet -O - ${BOOST_URL} | tar --strip-components=1 -xz -C boost; fi

  - |
    if [[ "${BOOST_VERSION}" == "trunk" ]]; then
      BOOST_URL="http://github.com/boostorg/boost.git"
      travis_retry git clone --depth 1 --recursive --quiet ${BOOST_URL}
      (cd boost && ./bootstrap.sh && ./b2 headers)
    fi

  - if [[ -d ${DEPS_DIR}/boost ]]; then CMAKE_OPTIONS+=" -DBOOST_ROOT=${DEPS_DIR}/boost"; fi

  ############################################################################
  # Install a recent CMake
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="http://www.cmake.org/files/v3.3/cmake-3.3.2-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      brew install cmake
    fi

  ############################################################################
  # Install Boost.Build
  ############################################################################
  - |
    if [[ "${BOOST_BUILD}" == "true" ]]; then
      (cd boost/tools/build && ./bootstrap.sh && ./b2 install --prefix=${DEPS_DIR}/b2)
      export PATH=${DEPS_DIR}/b2/bin:${PATH}
    fi

  ############################################################################
  # Install libc++ and libc++abi (on Linux only; Xcode uses libc++ by default)
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" && "${STDLIB}" != "libstdc++" ]]; then
      if   [[ "${COMPILER}" == "clang++-3.5" ]]; then LLVM_VERSION="3.5.2"
      elif [[ "${COMPILER}" == "clang++-3.6" ]]; then LLVM_VERSION="3.6.2";
      elif [[ "${COMPILER}" == "clang++-3.7" ]]; then LLVM_VERSION="3.7.0";
      else                                            LLVM_VERSION="trunk"; fi

      if [[ "${LLVM_VERSION}" != "trunk" ]]; then
        LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
        TAR_FLAGS="-xJ"
      else
        LLVM_URL="https://github.com/llvm-mirror/llvm/archive/master.tar.gz"
        LIBCXX_URL="https://github.com/llvm-mirror/libcxx/archive/master.tar.gz"
        LIBCXXABI_URL="https://github.com/llvm-mirror/libcxxabi/archive/master.tar.gz"
        TAR_FLAGS="-xz"
      fi

      mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
      travis_retry wget --quiet -O - ${LLVM_URL} | tar --strip-components=1 ${TAR_FLAGS} -C llvm
      travis_retry wget --quiet -O - ${LIBCXX_URL} | tar --strip-components=1 ${TAR_FLAGS} -C llvm/projects/libcxx
      travis_retry wget --quiet -O - ${LIBCXXABI_URL} | tar --strip-components=1 ${TAR_FLAGS} -C llvm/projects/libcxxabi
      (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_DIR}/llvm/install -DCMAKE_CXX_COMPILER=clang++)
      (cd llvm/build/projects/libcxx && make install -j2)
      (cd llvm/build/projects/libcxxabi && make install -j2)

      export CXXFLAGS="-I ${DEPS_DIR}/llvm/install/include/c++/v1"
      export LDFLAGS="-L ${DEPS_DIR}/llvm/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm/install/lib"
    fi

  ############################################################################
  # Install a recent Doxygen
  ############################################################################
  - |
    if [[ "${DOCUMENTATION}" == "true" ]]; then
      DOXYGEN_URL="http://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.10.linux.bin.tar.gz"
      mkdir doxygen && travis_retry wget --quiet -O - ${DOXYGEN_URL} | tar --strip-components=1 -xz -C doxygen
      export PATH=${DEPS_DIR}/doxygen/bin:${PATH}
    fi

  ############################################################################
  # Install and use a more recent Ruby and install the gems for the benchmarks
  ############################################################################
  - rvm use 2.1 --install --binary --fuzzy
  - gem install ruby-progressbar tilt


before_script:
  ############################################################################
  # Set the git identity (for pushing the documentation and the benchmarks)
  ############################################################################
  - git config --global user.name "Travis bot"

  ############################################################################
  # Go back to the root of the project and setup the build directory
  ############################################################################
  - cd ${TRAVIS_BUILD_DIR}
  - (mkdir build && cd build && cmake .. -DCMAKE_CXX_COMPILER=${COMPILER} -DBOOST_HANA_ENABLE_WERROR=ON ${CMAKE_OPTIONS})


script:
  ############################################################################
  # Only push the documentation when we're on master, otherwise just make sure
  # it builds properly.
  ############################################################################
  - |
    if [[ "${DOCUMENTATION}" == "true" ]]; then
      (cd build && make doc)

      if [[ "${TRAVIS_PULL_REQUEST}" == "false" && "${TRAVIS_BRANCH}" == "master" ]]; then
        # Suppress output to avoid leaking the token when the command fails
        git clone https://ldionne:${GITHUB_TOKEN}@github.com/boostorg/hana --depth 1 --branch=gh-pages doc/gh-pages &>/dev/null

        rm -rf doc/gh-pages/{search,*.png,*.css,*.js,*.html}
        cp -R build/doc/html/* doc/gh-pages

        pushd doc/gh-pages
        git add --all .
        git commit --allow-empty -m "Update to ${TRAVIS_COMMIT:0:7}"
        # Suppress output to avoid leaking the token
        travis_retry git push origin gh-pages &>/dev/null
        popd
      fi

      if [[ "${BOOST_BUILD}" == "true" ]]; then
        touch Jamroot
        echo "import doxygen ;" > project-config.jam
        echo "using doxygen ;" >> project-config.jam
        (cd doc && b2)
      fi
    fi

  ############################################################################
  # We only run the full benchmarks on `master` when we're not in a pull
  # request, because otherwise it takes too much Travis resources. Otherwise,
  # we only run partial benchmarks to make sure they compile and run properly.
  ############################################################################
  - |
    if [[ "${BENCHMARKS}" == "true" ]]; then
      if [[ "${TRAVIS_PULL_REQUEST}" == "false" && "${TRAVIS_BRANCH}" == "master" ]]; then
        (cd build && make benchmarks)
        compiler_slug=$(cd build && make travis_compiler_slug | grep 'travis_compiler_slug:' | cut -d ' ' -f 2)
        config_slug=$(cd build && make travis_config_slug | grep 'travis_config_slug:' | cut -d ' ' -f 2)

        # Suppress output to avoid leaking the token when the command fails
        git clone https://ldionne:${GITHUB_TOKEN}@github.com/boostorg/hana --depth 1 --branch=datasets benchmark/datasets &>/dev/null
        rm benchmark/datasets/${config_slug}/${compiler_slug}/*.json
        for benchmark in $(ls build/benchmark/*.json | grep -v ".erb"); do
          cp ${benchmark} benchmark/datasets/${config_slug}/${compiler_slug}
        done

        pushd benchmark/datasets
        git add --all .
        git commit --allow-empty -m "Update benchmarks to ${TRAVIS_COMMIT:0:7} for build type '${config_slug}' and compiler '${compiler_slug}'"
        # Suppress output to avoid leaking the token
        travis_retry git push origin datasets &>/dev/null
        popd
      else
        export BOOST_HANA_JUST_CHECK_BENCHMARKS=true
        (cd build && make benchmarks -j2)
      fi
    fi

  ############################################################################
  # Build and run the unit tests and examples.
  ############################################################################
  - |
    if [[ "${UNIT_TESTS}" == "true" ]]; then
      if [[ "${BOOST_BUILD}" != "true" ]]; then
        export CTEST_PARALLEL_LEVEL=2 # Run unit tests on two cores
        (cd build && make check -j2 -k)
      else
        touch Jamroot
        echo "using clang : : ${COMPILER} ;" > project-config.jam
        if [[ "${LDFLAGS}" == "" ]]; then
          (cd test && b2 toolset=clang cxxflags="-std=c++1y ${CXXFLAGS}" include="${DEPS_DIR}/boost")
        else
          (cd test && b2 toolset=clang cxxflags="-std=c++1y ${CXXFLAGS}" linkflags="${LDFLAGS}" include="${DEPS_DIR}/boost")
        fi
      fi
    fi


notifications:
  webhooks:
    urls: https://webhooks.gitter.im/e/ce1e3a2036d94b4a644f
    on_success: change
    on_failure: always
